1-1: Lambda Expressions
=======================

Why ?

Concurrency. Multi-threading.
Java 1.0: java.lang.Thread, with 4 methods. Complicated.
Java 5.0: java.util.concurrent, toolbox of new classes, APIs,... for threads (semaphores, mutexes,...).
Java 6.0: Phasers,...
Java 7.0: Fork/Join framework, to break a single task into multiple subtasks recursively. A pool of threads is created by the framework.
Java 8.0: Lambdas, to write parallel code.

Lambdas: functional programming.

	Param -> Body

The compiler infers the return type from the body type.

Need changes to Java to simplify parallel coding.
Lambda expressions simplify how to pass behaviour as a parameter.

1-2: Lambda Expression Syntax
=============================

(parameters) -> { lambda-body }

-> : lambda operator.
Lambda = anonymous function.
Body may throw exceptions.
Single-line lambdas don't need braces or an explicit return statement.
Single parameter: don't need brackets.
No parameters: empty brackets.

Ex:
() -> System.out.println("Toto")
x -> x + 10
(int x, int y) -> { return x + y; } // if braces, semi-colon is mandatory.
(String x, String y) -> x.length() - y.length()
(String x) -> {
	listA.add(x);
	listB.remove(x);
	return listB.size();
}

Type Inference: handled in a better way by the compiler.

Syntax is simple. Brackets and braces are optional for certain situations.
Type inference means types often do not need to be explicitely stated.

1-3: Functional Interfaces And Their Definition
===============================================

Anonymous function: like a method but not associated with a class.
But Java is strongly typed, so what is the type of the lambda?
-> a lambda expression can be used wherever the type is a functional interface (single abstract method type, the lambda provides the implementation of the abstract method).

Functional interface:
- an interface
- only 1 abstract method (default methods, static methods, equals method [inherited from Object]  are not abstract and do not count!)
- JDK8 introduces default methods (method in an interface, with an implementation) -> multiple inheritance of behaviour for Java
- JDK8 allows static methods in interfaces
- @FunctionalInterface annotation

Ex of existing functional interfaces: FileFilter, ActionListener, Callable...

Use of Lambda expression:
- variable assignment:
	Callable c = () -> process();
- method parameter
	new Thread(() -> process()).start();
	
Lambda expressions can be used anywhere the type is a functional interface.
The lambda exp provides the implementation of the single abstract method of the functional interface.

1-4: Functional Interfaces in the java.util.function Package
============================================================

Set of general purpose functional interfaces.
Lambda expressions can be used wherever these types are referenced.
Especially with the Stream API.

Consumer<T> : operation that takes a single value and returns no result (also BiConsumer<T,U> that takes 2 values). To compose consumers, use the default method andThen(Consumer after).
	String s -> System.out.println(s)
	(k, v) -> System.out.println("key: " + k + ", value: " + v)
	
Supplier : supplier of results, no parameter, 1 return (opposite of consumer).
	() -> createLogMessage()
	
Function<T,R> : accepts one argument, returns one result. The type of the argument and return can be different (also BiFunction<T,U,R> with 2 arguments and 1 result, the types can all be different). To compose, static methods compose (new function applied before), andThen (new function applied after).
	Student s -> s.getName()
	(String name, Student s) -> new Teacher(name, student)

UnaryOperator<T> : specialised form of function (single argument and result of the same type)
	String s -> s.toLowerCase()
	
BinaryOperator<T>  :specialised form of BiFunction (2 args, 1 result, all of the same type)
	(String x, String y) -> {
		if (x.length() > y.length())
			return x;
		return y;
	}
	
Predicate : a boolean valued function of 1 argument. (also BiPredicate). Combined with and(), or(), negate(), isEquals().
	Student s -> s.graduationYear() == 2011
	Files.find(start, maxDepth,
		(path, attr) -> String.valueOf(path).endsWith(".js") && attr.size() > 1024,
		FileVisitOption.FOLLOW_LINKS);

The function pacjage provides a range of functional interfaces.
Used extensively in Stream, but also in many other places.
Unlikely you will need to define your own extensions to the function package.

1-5: Method and Constructor Refences
====================================

Short-hand form.

Method references let us reuse a method as a lambda expression:
	FileFilter x = File f -> f.canRead();
	FileFilter x = File::canRead;
Format:
	target_reference::method_name
3 kinds: static methods, instance method of an arbitary type, instance method of an existing object.

Rules for construction:

(args) -> ClassName.staticMethod(args)
ClassName::staticMethod

(arg0, rest) -> arg0.instanceMethod(rest)
ClassName::instanceMethod
(ClassName is the type of arg0)

(args) -> expr.instanceMethod(args)
expr::instanceMethod

Constructor references: same concept as a method ref, for a constructor.
	
	Factory<List<String>> f = () -> return new ArrayList<String>();
	Factory<List<String>> f = ArrayList<String>::new;

Method ref provide a shorthand notation for simple lambdas.
3 types depending on how they are used.
Can also be used for constructors.

1-6: Referencing external variables in lambda expressions
=========================================================

Lambda expresions can refer to effectively final (even if not explicitely declared final, i.e. assigned once) local variables from the surrounding scope.
Closures on values, not variables.

	void expire(File root, long before) { // before is effectively final
		root.listFiles(File p -> p.lastModified() <= before);
	}

This ?
this refers to the enclosing object, not the lambda itself.
Think of this as a final predefined local.
A lambda is an anonymous function, it is not associated with a class, so there can be no this for the lambda.

Referencing instance variables which are not (effectively) final :

	class DataProcessor {
		private int value;
		public void process() {
			DataSet myData = myFactory.getDataSet();
			dataSet.forEach(d -> d.use(currentValue++)); 	// the compiler replaces with this.currentValue++
															// where this if effectively final
		}
	}

Variables in the surrounding scope can be used in a lambda, as long as they are effectively final.
this in a lambda refers to the object of the surrounding scope (the compiler inserts a reference to this when required).

1-7: Useful new methods in JDK8 that can use lambdas
====================================================

Iterable interface:
	Iterable.forEach(Consumer c)
	ex: myList.forEach(s -> System.out,println(s));
		myList.forEach(System.out::println); // method reference

Collection interface:
	Collection.removeIf(Predicate p)
	ex: myList.removeIf(s -> s.length() == 0);

List interface:
	List.replaceAll(UnaryOperator o)
	ex: myList.replaceAll(s -> s.toUpperCase());
		myList.replaceAll(String::toUpperCase); //method reference
	List.sort(Comparator c)
	replaces Collections.sort(List l, Comparator c)
	ex: myList.sort((x,y) -> x.length() - y.length()); // the compiler knows the comparator is of type String because of type inference.

Logger class:
	Common problem:
		logger.finest(createComplexMessage());
		-> createComplexMessage is always called even when not required (if the level is not set to the finest)
	Solution: new methods in Logger class that take a Supplier as an argument
		-> logger.finest(() -> createComplexMessage());
	We now pass how to create the message, not the actual message.

Use the new methods in JDK8 to eliminate the frequent need for loops.
Lambda expressions provide behaviour, not a value (very useful for conditional uses of data).

Summary
=======

Lambda expressions: provide a simple way to pass behaviour as a parameter or assign to a variable.
Can be used wherever a functional interface type is used.
Method and constructor references can be used as shorthand.
Several useful new methods in JDK8 can use lambdas.

	
